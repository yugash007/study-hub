"use client"

import type React from "react"

import { useState } from "react"
import Link from "next/link"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { BookOpen, Upload, FileText, Download, Loader2, ArrowLeft } from "lucide-react"
import { Textarea } from "@/components/ui/textarea"

export default function FormulaGeneratorPage() {
  const [file, setFile] = useState<File | null>(null)
  const [isProcessing, setIsProcessing] = useState(false)
  const [result, setResult] = useState<string>("")

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      setFile(e.target.files[0])
      setResult("")
    }
  }

  const handleGenerate = async () => {
    if (!file) return

    setIsProcessing(true)

    // Simulate AI processing
    setTimeout(() => {
      const mockResult = `# Formula & Code Sheet - ${file.name}

## Key Formulas

### 1. Quadratic Formula
x = (-b ± √(b² - 4ac)) / 2a

### 2. Pythagorean Theorem
a² + b² = c²

### 3. Area of Circle
A = πr²

### 4. Derivative Power Rule
d/dx(xⁿ) = nxⁿ⁻¹

## Code Snippets

### Binary Search (Python)
\`\`\`python
def binary_search(arr, target):
    left, right = 0, len(arr) - 1
    while left <= right:
        mid = (left + right) // 2
        if arr[mid] == target:
            return mid
        elif arr[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
    return -1
\`\`\`

### Quick Sort (JavaScript)
\`\`\`javascript
function quickSort(arr) {
    if (arr.length <= 1) return arr;
    const pivot = arr[arr.length - 1];
    const left = arr.filter((x, i) => x <= pivot && i < arr.length - 1);
    const right = arr.filter(x => x > pivot);
    return [...quickSort(left), pivot, ...quickSort(right)];
}
\`\`\`

## Key Definitions

**Algorithm**: A step-by-step procedure for solving a problem or accomplishing a task.

**Time Complexity**: A measure of the amount of time an algorithm takes to run as a function of input size.

**Space Complexity**: The amount of memory space required by an algorithm as a function of input size.

---
Generated by StudyHub Formula & Code Sheet Generator`

      setResult(mockResult)
      setIsProcessing(false)
    }, 2000)
  }

  const handleDownload = () => {
    const blob = new Blob([result], { type: "text/markdown" })
    const url = URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = "formula-sheet.md"
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }

  return (
    <div className="min-h-screen bg-background">
      {/* Header */}
      <header className="border-b border-border bg-card">
        <div className="container mx-auto px-4 py-6">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <Link href="/">
                <Button variant="ghost" size="icon">
                  <ArrowLeft className="h-5 w-5" />
                </Button>
              </Link>
              <div className="flex h-10 w-10 items-center justify-center rounded-lg bg-primary">
                <BookOpen className="h-6 w-6 text-primary-foreground" />
              </div>
              <h1 className="text-2xl font-black text-foreground">Formula & Code Sheet Generator</h1>
            </div>
          </div>
        </div>
      </header>

      <div className="container mx-auto px-4 py-12">
        <div className="max-w-5xl mx-auto">
          {/* Description */}
          <Card className="mb-8">
            <CardHeader>
              <CardTitle className="text-2xl">Transform PDFs into Concise Cheat Sheets</CardTitle>
              <CardDescription className="text-base leading-relaxed">
                Upload your lengthy class notes in PDF format, and our AI will automatically extract all key formulas,
                code snippets, and definitions into a clean, 2-page cheat sheet perfect for last-minute exam prep.
              </CardDescription>
            </CardHeader>
          </Card>

          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            {/* Upload Section */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Upload className="h-5 w-5 text-primary" />
                  Upload Your Notes
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="border-2 border-dashed border-border rounded-lg p-8 text-center hover:border-primary transition-colors">
                  <input type="file" accept=".pdf" onChange={handleFileChange} className="hidden" id="file-upload" />
                  <label htmlFor="file-upload" className="cursor-pointer">
                    <FileText className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
                    <p className="text-sm font-semibold text-foreground mb-2">
                      {file ? file.name : "Click to upload PDF"}
                    </p>
                    <p className="text-xs text-muted-foreground">PDF files up to 50MB</p>
                  </label>
                </div>

                <Button onClick={handleGenerate} disabled={!file || isProcessing} className="w-full" size="lg">
                  {isProcessing ? (
                    <>
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                      Processing...
                    </>
                  ) : (
                    <>
                      <FileText className="mr-2 h-4 w-4" />
                      Generate Cheat Sheet
                    </>
                  )}
                </Button>

                <div className="bg-muted rounded-lg p-4 space-y-2">
                  <h4 className="font-semibold text-sm text-foreground">What we extract:</h4>
                  <ul className="text-sm text-muted-foreground space-y-1">
                    <li>• Mathematical formulas and equations</li>
                    <li>• Code snippets and algorithms</li>
                    <li>• Key definitions and concepts</li>
                    <li>• Important theorems and rules</li>
                  </ul>
                </div>
              </CardContent>
            </Card>

            {/* Result Section */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <FileText className="h-5 w-5 text-secondary" />
                  Your Cheat Sheet
                </CardTitle>
              </CardHeader>
              <CardContent>
                {result ? (
                  <div className="space-y-4">
                    <Textarea
                      value={result}
                      readOnly
                      className="min-h-[400px] font-mono text-sm"
                      placeholder="Your generated cheat sheet will appear here..."
                    />
                    <Button onClick={handleDownload} className="w-full" size="lg">
                      <Download className="mr-2 h-4 w-4" />
                      Download Cheat Sheet
                    </Button>
                  </div>
                ) : (
                  <div className="min-h-[400px] flex items-center justify-center border-2 border-dashed border-border rounded-lg">
                    <div className="text-center">
                      <FileText className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
                      <p className="text-sm text-muted-foreground">Upload a PDF to generate your cheat sheet</p>
                    </div>
                  </div>
                )}
              </CardContent>
            </Card>
          </div>

          {/* Tips Section */}
          <Card className="mt-8">
            <CardHeader>
              <CardTitle>Tips for Best Results</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div className="space-y-2">
                  <h4 className="font-semibold text-foreground">Clear Text</h4>
                  <p className="text-sm text-muted-foreground leading-relaxed">
                    Use PDFs with clear, readable text rather than scanned images for better extraction accuracy.
                  </p>
                </div>
                <div className="space-y-2">
                  <h4 className="font-semibold text-foreground">Organized Notes</h4>
                  <p className="text-sm text-muted-foreground leading-relaxed">
                    Well-structured notes with clear headings help the AI identify key concepts more effectively.
                  </p>
                </div>
                <div className="space-y-2">
                  <h4 className="font-semibold text-foreground">Review Output</h4>
                  <p className="text-sm text-muted-foreground leading-relaxed">
                    Always review the generated sheet and add any missing formulas or notes manually.
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  )
}
